{% extends "base.html" %}
{% load i18n %}
{% load comments %}

{% block css %}

{% endblock %}

{% block content %}




<style>

.ajustar {
clear: both;
}
.menu {
	margin: 10px;
	height: 100px;
	font-size: 9pt;
	font-family: roman;
}
.menu ul {

	margin: 0pt;
	padding: 0pt;
	position: relative;
	z-index: 500;
	list-style-type: none;
	width: 11em;

}
.menu li {

	background-color: #cccc99;
	float: left;
}
.menu li.sub {
	background-color: #cccc99;
}

.menu a, .menu a:visited {
	border: 1px solid #ffffff;
	overflow: hidden;
	text-overflow: ellipsis;
	display: block;
	text-decoration: none;
	height: 2em;
	line-height: 2em;
	width: 11em;
	color: #000000;
	padding-left: 1em;
	font-weight: normal;
	font-style: normal;
	font-variant: normal;
	text-transform: none;
}
.menu b {
	float: right;
	margin-right: 5px;
}
* html .menu a, * html .menu a:visited {
	width: 11em;
}
* html .menu a:hover {
	color: #ccff66;
	background-color: #999966;
	position: relative;
	font-weight: normal;
	font-style: normal;
	font-variant: normal;
	text-decoration: none;
	text-transform: none;
}
.menu li:hover {
	position: relative;
}
.menu a:active, .menu a:focus {
	color: #ccff66;
	background-color: #999966;
	font-weight: normal;
	font-style: normal;
	font-variant: normal;
	text-decoration: none;
	text-transform: none;
}
.menu li:hover > a {
	color: #ccff66;
	background-color: #999966;
	font-weight: normal;
	font-style: normal;
	font-variant: normal;
	text-decoration: none;
	text-transform: none;
}
.menu li ul {
	padding: 2em;
	visibility: hidden;
	position: absolute;
	top: -2em;
	left: 7em;
	background-color: transparent;
}
.menu li:hover > ul {
	visibility: visible;
}
.menu ul a:hover ul ul {
	visibility: hidden;
}
.menu ul a:hover ul a:hover ul ul {
	visibility: hidden;
}
.menu ul a:hover ul a:hover ul a:hover ul ul {
	visibility: hidden;
}
.menu ul a:hover ul {
	visibility: visible;
}
.menu ul a:hover ul a:hover ul {
	visibility: visible;
}
.menu ul a:hover ul a:hover ul a:hover ul {
	visibility: visible;
}
.menu ul a:hover ul a:hover ul a:hover ul a:hover ul {
	visibility: visible;
}
.trans{
    
      
      position:absolute;
      width:40;
      height:15;
      z-index:10;
      
    }
    .
    fond{
      
      position:relative;
      z-index:1;  
    }
   

</style>


        <div class="trans" >
                    <form method="post" action="" id="from_stp_form">
                    {% for form in select_stp_form %}
                        <ul><li>{{ form }}</li></ul>
                    {% endfor %}
                    </form>
  
                    <div class="menu" id="menu_">   </div>
        </div> 
   
           
                        
        <div class="fond" id="container">
        
        <div id="webgl_warning" class="main" style="display:none;">
    <div class="warning_container">
      <div class="warning">

        <p><strong>WARNING:</strong> Your browser does not support <a target="_top" href="http://www.khronos.org/webgl/wiki/Main_Page">WebGL</a>. Thingiview works best with WebGL support, which is available in the following browsers:</p>
        <ul>
          <li><a target="_top" href="http://www.google.com/chrome">Google Chrome 9+</a> (Recommended)</li>
          <li><a target="_top" href="http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">Firefox 4.0+</a></li>

          <li><a target="_top" href="http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">Safari Nightly (OS X 10.6+ only)</a></li>
        </ul>
        <p>Or, you can <a href="javascript: show_thingiview();">try Thingiview at your own risk</a>. It may lock up your computer!</p>
      </div>
    </div>
  </div>
  
  </div>


		

       

{% endblock %}


{% block scripts %} 
		<script>


			         

        </script>
        
        <script type="text/javascript" src="/media/js/jquery.hoverIntent.minified.js"></script>

        
        
        
        
		<script type="text/javascript" src="/media/js/Three.js"></script> 
		{% for item in GeometryFiles %}
		<script type="text/javascript" src="/media/3D/{{ item.file.name}}"></script>
		{% endfor %}


 
 
     

		<script type="text/javascript">
		
		
            {% if javascript_arborescense %}
        	{{javascript_arborescense|safe}}		
            {% endif %}
            
            
		    var camera, scene, renderer;
		    var container;
		    var main_content;            
            var width ;
            var height ;
            var deep ;
            var mwidth ;
            var mheight ;
            var mdeep ;
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
			var controls;	
			$(document.getElementById( 'container' )).ready(init);
            setInterval( animate, 1000 / 30 );
			//animate();

			function init() {
			
			
			
	        if (!has_webgl()){

            document.getElementById("webgl_warning").style.display = 'block'; 

            }



			main_content = document.getElementById('main_content');
			container=document.getElementById('container');

				
			scene = new THREE.Scene();
            scene.add( new THREE.AmbientLight( 0x0ff20 ) );
            light1 = new THREE.PointLight( 0xff0040 );
			scene.add( light1 );
		    centrer_objet(object3D);
		    //muestra(object4D);
			scene.add( object3D);


		    
            camera = new THREE.PerspectiveCamera( 50, $(main_content).width() / $(main_content).height(), 0.1, radius*200 );
            camera.position.z = radius*1.5;
            

			renderer = new THREE.WebGLRenderer();
			renderer.setSize( $(main_content).width(), $(main_content).height() );
            container.appendChild( renderer.domElement );
				
            controls = new THREE.TrackballControls( camera, renderer.domElement );
            controls.rotateSpeed = 1.0;
            controls.zoomSpeed = 1.2;
            controls.panSpeed = 0.2;
            controls.noZoom = false;
            controls.noPan = false;
            controls.staticMoving = false;
            controls.dynamicDampingFactor = 0.3;
            controls.minDistance = 0;
            controls.maxDistance = radius * 100;
            controls.keys = [ 65, 83, 68 ]; // [ rotateKey, zoomKey, panKey ] [A,S,D]               
                
            var g 	= new THREE.CubeGeometry( mwidth, mheight, mdeep );
			var ma 	= new THREE.MeshNormalMaterial();
			var me	= new THREE.Mesh( g, ma );     

		    
		    
			me.matrixAutoUpdate = false;
			me.updateMatrix();
			//scene.add( me );
            menu();
            container.focus()
                

            renderer.render(scene, camera); 


                


			}
			

function muestra(object4D){
object4D.geometry.computeBoundingBox();   
boundingBox=object4D.geometry.boundingBox;
mwidth =Math.abs(boundingBox.x[ 1 ]-boundingBox.x[ 0 ]);
mheight =Math.abs(boundingBox.y[ 1 ]-boundingBox.y[ 0 ]);
mdeep =Math.abs(boundingBox.z[ 1 ]-boundingBox.z[ 0 ]);
alert(mwidth+" , "+mheight+" , "+mdeep)


}
function has_webgl(){
return !!window.WebGLRenderingContext;
}

function centrer_objet(object3D){
//object3D.updateMatrix(); 		
boundingBox=computeGroupBoundingBox(object3D);
//boundingBox=BB;
//alert(object3D.children.length) 
 			        
width =Math.abs(boundingBox.x[ 1 ]-boundingBox.x[ 0 ]);
height =Math.abs(boundingBox.y[ 1 ]-boundingBox.y[ 0 ]);
deep =Math.abs(boundingBox.z[ 1 ]-boundingBox.z[ 0 ]);
//alert(width+" , "+height+" , "+deep)
radius=width
if(height>radius){
radius=height
}
if(deep>radius){
radius=deep
}

object3D.position.x=-(boundingBox.x[ 0 ]+boundingBox.x[ 1 ])/2;
object3D.position.y=-(boundingBox.y[ 0 ]+boundingBox.y[ 1 ])/2;  
object3D.position.z=-(boundingBox.z[ 0 ]+boundingBox.z[ 1 ])/2; 


object3D.matrixAutoUpdate = false;   
object3D.updateMatrix(); 



}
            
            
function animate() {

//requestAnimationFrame( animate );
controls.update();
renderer.render( scene, camera );


};

            
function updateBoundingBox(object){

object.geometry.computeBoundingBox();
boundingBox=object.geometry.boundingBox;
if (!BB){
BB= { 
'x': [ boundingBox.x[ 0 ], boundingBox.x[ 1 ] ],
'y': [ boundingBox.y[ 0 ], boundingBox.y[ 1 ] ],
'z': [ boundingBox.z[ 0 ], boundingBox.z[ 1 ] ]}; 

alert("left : "+BB.y[ 0 ]+"    right : "+BB.y[ 1 ]+"    height : "+Math.abs(BB.y[ 1 ]-BB.y[ 0 ]))

}
else{
alert("left : "+boundingBox.y[ 0 ]+"    right : "+boundingBox.y[ 1 ]+"    height : "+Math.abs(boundingBox.y[ 1 ]-boundingBox.y[ 0 ]))
if ( boundingBox.x[ 0 ] < BB.x[ 0 ] ) {
BB.x[ 0 ] = boundingBox.x[ 0 ];
}
if ( boundingBox.x[ 1 ] > BB.x[ 1 ] ) {
BB.x[ 1 ] = boundingBox.x[ 1 ];
}        
if ( boundingBox.y[ 0 ] < BB.y[ 0 ] ) {
alert("update inf "+BB.y[ 0 ]+" to "+boundingBox.y[ 0])
BB.y[ 0 ] = boundingBox.y[ 0 ];
}
if ( boundingBox.y[ 1 ] > BB.y[ 1 ] ) {
alert("update top "+BB.y[ 1 ]+" to "+boundingBox.y[ 1])
BB.y[ 1 ] = boundingBox.y[ 1 ];
}
if ( boundingBox.z[ 0 ] < BB.z[ 0 ] ) {
BB.z[ 0 ] = boundingBox.z[ 0 ];
}
if ( boundingBox.z[ 1 ] > BB.z[ 1 ] ) {
BB.z[ 1 ] = boundingBox.z[ 1 ];
}


}
}




						
function computeGroupBoundingBox(Object_Group) {   
   if(Object_Group.children.length >  0 ){ 
        var boundingBox;    
        for ( var v = 0 ;v  < Object_Group.children.length; v ++ ) {
        
        Object_Group.children[ v ].geometry.computeBoundingBox();        
        if(Object_Group.children[ v ].geometry.boundingBox){
        //alert(v);   
        if(!boundingBox){
        boundingBox= { 
        'x': [ Object_Group.children[ v ].geometry.boundingBox.x[ 0 ], Object_Group.children[ v ].geometry.boundingBox.x[ 1 ] ],
        'y': [ Object_Group.children[ v ].geometry.boundingBox.y[ 0 ], Object_Group.children[ v ].geometry.boundingBox.y[ 1 ] ],
        'z': [ Object_Group.children[ v ].geometry.boundingBox.z[ 0 ], Object_Group.children[ v ].geometry.boundingBox.z[ 1 ] ]}; 
        }
        if ( Object_Group.children[ v ].geometry.boundingBox.x[ 0 ] < boundingBox.x[ 0 ] ) {
        boundingBox.x[ 0 ] = Object_Group.children[ v ].geometry.boundingBox.x[ 0 ];
        }
        if ( Object_Group.children[ v ].geometry.boundingBox.x[ 1 ] > boundingBox.x[ 1 ] ) {
        boundingBox.x[ 1 ] = Object_Group.children[ v ].geometry.boundingBox.x[ 1 ];
        }        
        if ( Object_Group.children[ v ].geometry.boundingBox.y[ 0 ] < boundingBox.y[ 0 ] ) {
        boundingBox.y[ 0 ] = Object_Group.children[ v ].geometry.boundingBox.y[ 0 ];
        }
        if ( Object_Group.children[ v ].geometry.boundingBox.y[ 1 ] > boundingBox.y[ 1 ] ) {
        boundingBox.y[ 1 ] = Object_Group.children[ v ].geometry.boundingBox.y[ 1 ];

        }
        if ( Object_Group.children[ v ].geometry.boundingBox.z[ 0 ] < boundingBox.z[ 0 ] ) {
        boundingBox.z[ 0 ] = Object_Group.children[ v ].geometry.boundingBox.z[ 0 ];
        }
        if ( Object_Group.children[ v ].geometry.boundingBox.z[ 1 ] > boundingBox.z[ 1 ] ) {
        boundingBox.z[ 1 ] = Object_Group.children[ v ].geometry.boundingBox.z[ 1 ];
        }      
}
}
}
return boundingBox;
}
            
            
            


		


</script>

{% endblock %}
