===========================================
Commands
===========================================

Most of the available commands must be run from the main directory where the
file :file:`manage.py` is located.

This script accepts a command followed by mandatory and optional arguments.

Usage: :samp:`./manage.py subcommand [options] [args]`

The following options are always available:

.. option:: -v VERBOSITY, --verbosity=VERBOSITY

    Verbosity level; 0=minimal output, 1=normal output, 2=all output

.. option:: --traceback          
    
    Print traceback on exception. Useful for debugging purpose.
 
.. option:: --settings=SETTINGS 

    The Python path to a settings module, e.g.  "myproject.settings.main". 
    If this isn't provided, the DJANGO_SETTINGS_MODULE environment variable will be used.

.. option:: --pythonpath=PYTHONPATH

    A directory to add to the Python path, e.g.  "/home/djangoprojects/myproject".

.. option:: --version

    show Django's version number
    
.. option:: -h, --help 

    show an help message and exit



Database related commands
============================

syncdb
------

The command :program:`./manage.py syncdb` creates 
the database tables for all apps in :const:`~settings.INSTALLED_APPS`
whose tables haven't already been created, except those which use migrations.

Usage: :samp:`./manage.py syncdb [options]`

.. program:: ./manage.py syncdb

.. option:: --all              

    Makes syncdb work on all apps, even migrated ones. Be careful!
    This option should only be set to initialize if no tables were
    created.

migrate
-------

The command :program:`./manage.py migrate` runs migrations for all apps.

Use this commands after an upgrade of OpenPLM to synchronize the database.
Always make a backup of your data (database and files) before running this
command!

Usage: :samp:`./manage.py migrate [options] [appname] [migrationname|zero] [--all] [--list] [--skip] [--merge] [--no-initial-data] [--fake] [--db-dry-run] [--database=dbalias]`

.. program:: ./manage.py migrate

.. option:: --all          

    Run the specified migration for all apps.

.. option:: --list 

    List migrations noting those that have been applied

.. option:: --skip

    Will skip over out-of-order missing migrations

.. option:: --merge  

    Will run out-of-order missing migrations as they are - no rollbacks.

.. option:: --no-initial-data  

    Skips loading initial data if specified.

.. option:: --fake   

    Pretends to do the migrations, but doesn't actually execute them.
    Only set this option if your database schema is synchronised with
    OpenPLM source code.

.. option:: --db-dry-run        

    Doesn't execute the SQL generated by the db methods, and doesn't store a
    record that the migration(s) occurred. Useful to test migrations before
    applying them.

.. option:: --delete-ghost-migrations

    Tells South to delete any 'ghost' migrations (ones in
    the database but not on disk).

.. option:: --ignore-ghost-migrations

    Tells South to ignore any 'ghost' migrations (ones in
    the database but not on disk) and continue to apply
    new migrations.

.. seealso::

    More documentation on this command is available
    `here <http://south.readthedocs.org/en/latest/commands.html#migrate>`__.

dbshell
-------

Runs the command-line client for the database.

Usage: :samp:`./manage.py dbshell`


Search index related commands
================================

.. note::
    
    Do not forget to set change the owner of the index directory
    to www-data (user who runs celery)

rebuild_index
---------------

The command :program:`./manage.py rebuild_index` completely rebuilds the search
index by removing the old data and then updating.

Usage: :samp:`./manage.py rebuild_index [options]`


.. program:: ./manage.py rebuild_index

.. option:: -a AGE, --age=AGE 

    Number of hours back to consider objects new.

.. option:: -b BATCHSIZE, --batch-size=BATCHSIZE

    Number of items to index at once.
    
.. option:: -r, --remove     

    Remove objects from the index that are no longer present in the database.

.. option:: -k WORKERS, --workers=WORKERS

    Allows for the use multiple workers to parallelize indexing. Requires
    multiprocessing.

update_index
----------------

The command :program:`./manage.py update_index` freshens the index for the given app(s).

Usage: :samp:`./manage.py update_index [options] <{appname} {appname} ...>`

.. program:: ./manage.py update_index

.. option:: -a AGE, --age=AGE 

    Number of hours back to consider objects new.

.. option:: -b BATCHSIZE, --batch-size=BATCHSIZE

    Number of items to index at once.
    
.. option:: -r, --remove     

    Remove objects from the index that are no longer present in the database.

.. option:: -k WORKERS, --workers=WORKERS

    Allows for the use multiple workers to parallelize indexing. Requires
    multiprocessing.

.. seealso::

    More documentation on these commands is available
    `here <http://django-haystack.readthedocs.org/en/v1.2.7/management_commands.html>`__.


User related commands
========================

changepassword
---------------

The command :program:`./manage.py changepassword` changes the password of the
given user.

Usage :samp:`./manage.py changepassword [options] {username}`

createsuperuser
----------------

The command :program:`./manage.py createsuperuser` creates a new super user
(administrator who can manage data through the admin interface).

Usage :samp:`./manage.py createsuperuser [options]`


createcompany
----------------

The command :program:`./manage.py createcompany` creates the *company*
user (special user who owns official and deprecated parts and documents).

Usage :samp:`./manage.py createcompany [options]`



Translation related commands
===============================


